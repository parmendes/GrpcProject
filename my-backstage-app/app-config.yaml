app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  logging:
      level: debug
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: 
      - "http://localhost:3000"
      - "http://localhost:5036"
      - "http://localhost:5000"
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  reading:
    allow:
      - host: '127.0.0.1:5036'
      - host: '127.0.0.1:5000'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
  auth:
    allowGuestAccess: true
    keys:
      - secret: development-secret
      # NEVER USE THIS IN PRODUCTION
integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}
  file:
    enabled: true
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    #runIn: 'docker' # Alternatives - 'local'
    runIn: local
  publisher:
    type: 'local' # Alternatives - 'local' or 'awsS3'. Read documentation for using alternatives.
    target: './techdocs-output'

auth:
  environment: development
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    # See https://backstage.io/docs/auth/guest/provider
    guest: {}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  # import:
  #   entityFilename: http://localhost:8080/catalog-info.yaml
  #   pullRequestBranchName: backstage-integration
  #   dryRun: false
  #   #entityFilename: catalog-info.yaml
  # rules:
  #   - allow: [Component, System, API, Resource, Location, Template, User, Group]
  locations:
    - type: url
      target: https://github.com/parmendes/GrpcProject/tree/main/*.yaml
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml
    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]
    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]
  useUrlReadersSearch: true

search:
  indexer:
    type: 'lunr'  # ou elastic/lucene dependendo do setup


kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true
